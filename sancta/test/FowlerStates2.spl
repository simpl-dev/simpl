grammar ee.cyber.simplicitas.test.FowlerStates;

Program: Definition+;

option Definition{val testing = 0}: Import | Machine | ExternalMachine | STRING;

Import: 'import' importURI=STRING;

ExternalMachine: 'external' Id;

Machine: 'machine'
    name=Id
    'events' events=Event+ 'end'
    ('resetEvents' (resetEvents=Id)+ 'end')?
    'commands' (commands=Command)+ 'end'
    states=State+
    'init' 'skip();' initState=Id;

Event {
    var whatever = ""
}: name=Id code=Id;

Command: name=Id code=Id;

State: 'state'
    name=Id
     ('actions' '{' actions=Id+ '}')?
     transitions=Transition*
     'end';

Transition: event=Id Id f='=>' state=Id;

option Expr: Plus | Minus | Mul | Div;

option PlusExpr returns Expr: Plus | Minus;

Plus: a=MulExpr ("+" b=PlusExpr)?;
Minus: a=MulExpr ("-" b=MinusExpr)?;

option MulExpr: Mul | Div;

Mul returns Expr {if (b eq null) a else Mul(a, b)}: a=Prim ("*" b=MulExpr)?;
Div: a=Prim ("/" b=MulExpr)?;

option Prim: Id | Paren;

Paren returns Expr {expr}: "(" Expr ")";

terminal Id: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
fragment STR_BODY: ~('\\'|'"') | '\\' .;
terminal STRING {var doh = 0}:
	'"' STR_BODY* '"' | '\'' STR_BODY* '\'';
fragment ML_COMMENT: '/*' (~'*' | '*' ~'/')* '*/';
fragment SL_COMMENT: '//' ~('\n'|'\r')*;
terminal WS: (' '|'\t'|'\r'|'\n'|SL_COMMENT|ML_COMMENT)+ {skip();} ;
