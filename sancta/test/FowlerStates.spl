grammar ee.cyber.simplicitas.test.FowlerStates;

options (backtrack=false;)

Program: Definition+;

option Definition{val testing = 0}: Import | Machine | ExternalMachine | Str;

Import: 'import' importURI=Str;

ExternalMachine: 'external' Id;

Machine: 'machine'
    name=Id
    'events' events=Event+ 'end'
    ('resetEvents' (resetEvents=Id)+ 'end')?
    'commands' (commands=Command)+ 'end'
    states=State+
    'init' 'skip();' initState=Id;

Event {
    var whatever = ""
}: name=Id code=Id;

Command: name=Id code=Id;

State: 'state'
    name=Id
     ('actions' '{' actions=Id+ '}')?
     transitions=Transition*
     'end';

Transition: event=Id Id f='=>' state=Id;

terminal Id: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
fragment StrBody: ~('\\'|'"') | '\\' .;
terminal Str {var doh = 0}:
	'"' StrBody* '"' | '\'' StrBody* '\'';
fragment MlComment: '/*' (~'*' | '*' ~'/')* '*/';
fragment SlComment: '//' ~('\n'|'\r')*;
terminal WS: (' '|'\t'|'\r'|'\n'|SlComment|MlComment)+ {skip();} ;
