grammar ee.cyber.simplicitas.ide.Simpl;

options (backtrack=true; memoize=true;)

/** This is the main entry point for Simpl grammar. Grammar definition
    consists of header and list of rule definitions. */
GrammarDef: header=PackageDef ';' opts=OptionList? rules=RuleDef+;

/** Standard header for grammar, indicates package name where the
    generated code will reside. */
PackageDef: 'grammar' DottedId;

/** This directive can be used to pass grammar-level options to ANTLR. */
OptionList: "options" "(" (name=Id "=" value=Id ";")* ")";

/** Java-style identifier in the style of foo.bar.baz */
DottedId {
    def text = (head :: tail) map(_.text) mkString(".")
}: head=Id ('.' tail=Id)*;

/** This rule is not part of the actual grammar. Its purpose is to
    define a common base class for all the different rule definitions. */
option RuleDef {
    def name: Id
    var documentation: String = null
}:    TerminalDef
    | FragmentDef
    | OptionDef
    | NonTerminalDef;

/** Defines a terminal rule. Terminal rules will create tokens that
    are consumed by non-terminal rules.
    The hidden keyword specifies that the matched token is hidden from
    non-terminal rules. It should be used to mark white space, comments, etc. 
*/
TerminalDef: 'hidden'? 'terminal' name=Id body=Code? ':'
    pattern=Pattern ';';

/** Base class for references, not part of the actual grammar. */
option Ref {
    var ref: RuleDef = null
    }: RuleRef | FragmentRef;

/** Points at things that can be referenced from rules:
    terminals, options and nonterminals. */ 
RuleRef: Id;

/** Defines a fragment rule. Fragment rules can be called by terminal rules
    and they (unlike terminal rules) do not produce a token. */
FragmentDef: 'fragment' name=Id ':' pattern=Pattern ';';

/** Defines an option rule. Option rule defines base class for all the
    alternatives mentioned in the rule. */
OptionDef: 'option' name=Id body=Code? ':'
    alts=RuleRef ('|' alts2=RuleRef)* ';';

/** Defines non-terminal rule. */
NonTerminalDef: name=Id body=Code? ':' alt=AltList ';';

/** List of alternatives, separated by pipe character. */
AltList: lst=MatchList ('|' lst2=MatchList)*;
MatchList: m=Match+;
Match: (name=Id '=')? token=MatchToken modifier=Modifier?;
terminal Modifier: '?' | '*' | '+';
MatchToken: '(' alt=AltList ')' | ref=RuleRef | Str;

// terminals
Pattern: lst=TermList ('|' lst2=TermList)*;
TermList: termMatch=TermMatch+;
TermMatch: (inv=Tilde)? t=Terminal modifier=Modifier? code=Code*;

/** Things that can pass as terminals. */
option Terminal: TerminalList
    | FragmentRef
    | TerminalRange 
    | TerminalLiteral
    | TerminalDot;

TerminalList: '(' pattern=Pattern ')';
/** FragmentRef can point to fragments. */
FragmentRef: Id;
TerminalRange: start=Str '..' end=Str;
TerminalLiteral: str=Str;
TerminalDot: '.';

fragment Letter: 'a'..'z' | 'A'..'Z' | '_';
terminal Tilde: '~';
/** Identifiers can contain Latin characters, numbers and underscore. */
terminal Id: Letter (Letter | '0'..'9')*;
fragment SingleQuotedStr: '\'' (~('\''|'\\') | '\\' .)* '\'';
fragment DoubleQuotedStr: '"' (~('"'|'\\') | '\\' .)* '"';
/** Simpl supports both single- and double quoted strings. */
terminal Str: SingleQuotedStr | DoubleQuotedStr;
/** Embedded Scala code that will be included in body of the
    generated classes. */
terminal Code: '{' (~('{'|'}') | Code)* '}';
/** Simpl supports Java/C++ style single-line comments starting with // */
hidden terminal SlComment: '//' ~('\r'|'\n')*;
/** Simpl supports Java/C++ style multi-line comments. */
hidden terminal MlComment:
    '/*' (MlComment | ~('*'|'/') | '/' ~'*' | '*' ~'/')* '*/';
hidden terminal WS: (' '|'\t'|'\n'|'\r')+;
